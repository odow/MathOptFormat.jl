{
    "$schema": "https://json-schema.org/schema#",
    "$id": "https://github.com/odow/MathOptFormat.jl/tree/master/src/MOF/mof.schema.json",
    "title": "The schema for MathOptFormat",
    "type": "object",
    "required": ["version", "variables", "objectives", "constraints"],
    "properties": {
        "version": {
            "description": "The version of MathOptFormat that this schema validates against.",
            "const": 0
        },
        "name": {
            "description": "The name of the model.",
            "type": "string"
        },
        "author": {
            "description": "The author of the model for citation purposes.",
            "type": "string"
        },
        "description": {
            "description": "A human-readable description of the model.",
            "type": "string"
        },
        "variables": {
            "description": "An array of variables in the model. Each must have a unique name.",
            "type": "array",
            "items": {
                "type": "object",
                "required": ["name"],
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "primal_start": {
                        "description": "An initial value that the optimizer may use to warm-start the solution process.",
                        "type": "number"
                    }
                }
            },
            "uniqueItems": true
        },
        "objectives": {
            "description": "An array of objectives in the model.",
            "type": "array",
            "items": {
                "type": "object",
                "required": ["sense", "function"],
                "properties": {
                    "sense": {
                        "enum": ["min", "max"]
                    },
                    "function": {
                        "$ref": "#/definitions/scalar_functions"
                    }
                }
            }
        },
        "constraints": {
            "description": "An array of constraints in the model. Scalar-valued functions can only be paired with scalar-sets, and the same applies for vector-valued functions and sets.",
            "type": "array",
            "items": {
                "type": "object",
                "required": ["function", "set"],
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "oneOf": [{
                    "description": "A scalar-valued constraint.",
                    "properties": {
                        "function": {
                            "$ref": "#/definitions/scalar_functions"
                        },
                        "set": {
                            "$ref": "#/definitions/scalar_sets"
                        }
                    }
                }, {
                    "description": "A vector-valued constraint.",
                    "properties": {
                        "function": {
                            "$ref": "#/definitions/vector_functions"
                        },
                        "set": {
                            "$ref": "#/definitions/vector_sets"
                        }
                    }
                }]
            },
            "uniqueItems": true
        }
    },
    "definitions": {
        "ScalarAffineTerm": {
            "description": "A helper object that represents `coefficent * variable`.",
            "type": "object",
            "required": ["coefficient", "variable"],
            "properties": {
                "coefficient": {
                    "type": "number"
                },
                "variable": {
                    "type": "string"
                }
            }
        },
        "ScalarQuadraticTerm": {
            "description": "A helper object that represents `coefficent * variable_1 * variable_2`.",
            "type": "object",
            "required": ["coefficient", "variable_1", "variable_2"],
            "properties": {
                "coefficient": {
                    "type": "number"
                },
                "variable_1": {
                    "type": "string"
                },
                "variable_2": {
                    "type": "string"
                }
            }
        },
        "VectorAffineTerm": {
            "description": "A helper object that represents a `ScalarAffineTerm` in row `output_index`.",
            "type": "object",
            "required": ["output_index", "scalar_term"],
            "properties": {
                "output_index": {
                    "type": "integer",
                    "minimum": 1
                },
                "scalar_term": {
                    "$ref": "#/definitions/ScalarAffineTerm"
                }
            }
        },
        "VectorQuadraticTerm": {
            "description": "A helper object that represents a `ScalarQuadraticTerm` in row `output_index`.",
            "type": "object",
            "required": ["output_index", "scalar_term"],
            "properties": {
                "output_index": {
                    "type": "integer",
                    "minimum": 1
                },
                "scalar_term": {
                    "$ref": "#/definitions/ScalarQuadraticTerm"
                }
            }
        },
        "NonlinearTerm": {
            "description": "A node in an expresion graph representing a nonlinear function.",
            "type": "object",
            "required": ["head"],
            "oneOf": [{
                "description": "Unary operators.",
                "required": ["args"],
                "properties": {
                    "head": {
                        "enum": [
                            "log", "log10", "exp", "sqrt", "floor", "ceil",
                            "abs", "cos", "sin", "tan", "acos", "asin", "atan",
                            "cosh", "sinh", "tanh", "acosh", "asinh", "atanh"
                        ]
                    },
                    "args": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/NonlinearTerm"
                        },
                        "minItems": 1,
                        "maxItems": 1
                    }
                }
            }, {
                "description": "Binary operators.",
                "required": ["args"],
                "properties": {
                    "head": {
                        "enum": ["/", "^"]
                    },
                    "args": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/NonlinearTerm"
                        },
                        "minItems": 2,
                        "maxItems": 2
                    }
                }
            }, {
                "description": "N-ary operators.",
                "required": ["args"],
                "properties": {
                    "head": {
                        "enum": ["+", "-", "*", "min", "max"]
                    },
                    "args": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/NonlinearTerm"
                        },
                        "minItems": 1
                    }
                }
            }, {
                "description": "A real-valued numeric constant.",
                "required": ["value"],
                "properties": {
                    "head": {
                        "const": "real"
                    },
                    "value": {
                        "type": "number"
                    }
                }
            }, {
                "description": "A complex-valued numeric constant.",
                "required": ["real", "imag"],
                "properties": {
                    "head": {
                        "const": "complex"
                    },
                    "real": {
                        "type": "number"
                    },
                    "imag": {
                        "type": "number"
                    }
                }
            }, {
                "description": "A reference to an optimization variable",
                "required": ["name"],
                "properties": {
                    "head": {
                        "const": "variable"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            }, {
                "description": "A pointer to a (1-indexed) element in the `node_list` field in a nonlinear function",
                "required": ["index"],
                "properties": {
                    "head": {
                        "const": "node"
                    },
                    "index": {
                        "type": "integer",
                        "minimum": 1
                    }
                }
            }]
        },
        "scalar_functions": {
            "description": "A schema for the scalar-valued functions defined by MathOptFormat.See http://www.juliaopt.org/MathOptInterface.jl/v0.8/apireference/#Functions-and-function-modifications-1 for a list of the functions and their meanings.",
            "type": "object",
            "required": ["head"],
            "oneOf": [{
                "description": "The scalar variable `variable`.",
                "required": ["variable"],
                "properties": {
                    "head": {
                        "const": "SingleVariable"
                    },
                    "variable": {
                        "type": "string"
                    }
                }
            }, {
                "description": "The function `a'x + b`, where `a` is a sparse vector specified by a list of `ScalarAffineTerm`s in `terms` and `b` is the scalar in `constant`. Duplicate variables in `terms` are accepted, and the corresponding coefficients are summed together.",
                "required": ["constant", "terms"],
                "properties": {
                    "head": {
                        "const": "ScalarAffineFunction"
                    },
                    "constant": {
                        "type": "number"
                    },
                    "terms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/ScalarAffineTerm"
                        }
                    }
                }
            }, {
                "description": "The function `0.5x'Qx + a'x + b`, where `a` is a sparse vector of `ScalarAffineTerm`s in `affine_terms`, `b` is the scalar `constant`, and `Q` is a symmetric matrix specified by a list of `ScalarQuadraticTerm`s in `quadratic_terms`. Duplicate indices in `affine_terms` and `quadratic` are accepted, and the corresponding coefficients are summed together. Mirrored indices in `quadratic_terms` (i.e., `(i,j)` and `(j, i)`) are considered duplicates; only one need to be specified.",
                "required": ["constant", "affine_terms", "quadratic_terms"],
                "properties": {
                    "head": {
                        "const": "ScalarQuadraticFunction"
                    },
                    "constant": {
                        "type": "number"
                    },
                    "affine_terms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/ScalarAffineTerm"
                        }
                    },
                    "quadratic_terms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/ScalarQuadraticTerm"
                        }
                    }
                }
            }, {
                "description": "An expression graph representing a scalar function.",
                "required": ["root", "node_list"],
                "properties": {
                    "head": {
                        "const": "Nonlinear"
                    },
                    "root": {
                        "$ref": "#/definitions/NonlinearTerm"
                    },
                    "node_list": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/NonlinearTerm"
                        }
                    }
                }
            }]
        },
        "vector_functions": {
            "description": "A schema for the vector-valued functions defined by MathOptFormat.See http://www.juliaopt.org/MathOptInterface.jl/v0.8/apireference/#Functions-and-function-modifications-1 for a list of the functions and their meanings.",
            "type": "object",
            "required": ["head"],
            "oneOf": [{
                "description": "An ordered list of variables.",
                "required": ["variables"],
                "properties": {
                    "head": {
                        "const": "VectorOfVariables"
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }, {
                "description": "The function `Ax + b`, where `A` is a sparse matrix specified by a list of `VectorAffineTerm`s in `terms` and `b` is a dense vector specified by `constants`.",
                "required": ["constants", "terms"],
                "properties": {
                    "head": {
                        "const": "VectorAffineFunction"
                    },
                    "constants": {
                        "type": "array",
                        "items": {
                            "type": "number"
                        }
                    },
                    "terms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/VectorAffineTerm"
                        }
                    }
                }
            }, {
                "description": "The vector-valued quadratic function `q(x) + Ax + b`, where `q(x)` is specified by a list of `VectorQuadraticTerm`s in `quadratic_terms`, `A` is a sparse matrix specified by a list of `VectorAffineTerm`s in `affine_terms` and `b` is a dense vector specified by `constants`.",
                "required": ["constants", "affine_terms", "quadratic_terms"],
                "properties": {
                    "head": {
                        "const": "VectorQuadraticFunction"
                    },
                    "constants": {
                        "type": "array",
                        "items": {
                            "type": "number"
                        }
                    },
                    "affine_terms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/VectorAffineTerm"
                        }
                    },
                    "quadratc_terms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/VectorQuadraticTerm"
                        }
                    }
                }
            }]
        },
        "scalar_sets": {
            "description": "A schema for the scalar-valued sets defined by MathOptFormat. See http: //www.juliaopt.org/MathOptInterface.jl/v0.8/apireference/#Sets-1 for a list of the sets and their meanings.",
            "type": "object",
            "required": ["head"],
            "oneOf": [{
                "description": "The set `(-inf, upper]`.",
                "required": ["upper"],
                "properties": {
                    "head": {
                        "const": "LessThan"
                    },
                    "upper": {
                        "type": "number"
                    }
                }
            }, {
                "description": "The set `[lower, upper)`.",
                "required": ["lower"],
                "properties": {
                    "head": {
                        "const": "GreaterThan"
                    },
                    "lower": {
                        "type": "number"
                    }
                }
            }, {
                "description": "The set `{value}`.",
                "required": ["value"],
                "properties": {
                    "head": {
                        "const": "EqualTo"
                    },
                    "value": {
                        "type": "number"
                    }
                }
            }, {
                "description": "Interval: the set `[lower, upper]`\nSemiinteger: the set `{0} ∪ {lower, lower + 1, ..., upper}`\nSemicontinuous: the set `{0} ∪ [lower, upper]`.",
                "required": ["lower", "upper"],
                "properties": {
                    "head": {
                        "enum": ["Interval", "Semiinteger", "Semicontinuous"]
                    },
                    "lower": {
                        "type": "number"
                    },
                    "upper": {
                        "type": "number"
                    }
                }
            }, {
                "description": "ZeroOne: the set `{0, 1}`\nInteger: the set `ℤ`.",
                "properties": {
                    "head": {
                        "enum": ["ZeroOne", "Integer"]
                    }
                }
            }]
        },
        "vector_sets": {
            "description": "A schema for the vector-valued sets defined by MathOptFormat. See http: //www.juliaopt.org/MathOptInterface.jl/v0.8/apireference/#Sets-1 for a list of the sets and their meanings.",
            "type": "object",
            "required": ["head"],
            "oneOf": [{
                "description": "ExponentialCone: the cone `[x, y, z] ∈ {R³: y * exp(x / y) ≤ z, y ≥ 0}`\nDualExponentialCone: the cone `[u, v, w] ∈ {R³: -u * exp(v / u) ≤ exp(1) * w, u < 0}`.",
                "properties": {
                    "head": {
                        "enum": ["ExponentialCone", "DualExponentialCone"]
                    }
                }
            }, {
                "required": ["weights"],
                "properties": {
                    "head": {
                        "enum": ["SOS1", "SOS2"]
                    },
                    "weights": {
                        "type": "array",
                        "items": {
                            "type": "number"
                        }
                    }
                }
            }, {
                "description": "Zeros: the set `{0}^{dimension}`\nReals: the set `R^{dimension}`\nNonpositives: the set `R-^{dimension}`\nNonnegatives: the set `R+^{dimension}`\nSecondOrderCone: the cone `[t, x] ∈ {R^{dimension} : t ≥ ||x||₂`\nRotatedSecondOrderCone: the cone `[t, u, x] ∈ {R^{dimension} : 2tu ≥ (||x||₂)²; t, u ≥ 0}\nGeometricMeanCone: the cone `[t, x] ∈ {R^{dimension}: t ≤ (Πxᵢ)^{1 / (dimension-1)}}`.",
                "required": ["dimension"],
                "properties": {
                    "head": {
                        "enum": [
                            "Zeros", "Reals", "Nonpositives", "Nonnegatives",
                            "SecondOrderCone", "RotatedSecondOrderCone",
                            "GeometricMeanCone"
                        ]
                    },
                    "dimension": {
                        "type": "integer",
                        "minimum": 1
                    }
                }
            }, {
                "required": ["side_dimension"],
                "properties": {
                    "head": {
                        "enum": [
                            "RootDetConeTriangle", "RootDetConeSquare",
                            "LogDetConeTriangle", "LogDetConeSquare",
                            "PositiveSemidefiniteConeTriangle",
                            "PositiveSemidefiniteConeSquare"
                        ]
                    },
                    "side_dimension": {
                        "type": "integer",
                        "minimum": 1
                    }
                }
            }, {
                "description": "PowerCone: the cone `[x, y, z] ∈ {R³: x^{exponent} y^{1-exponent} ≥ |z|; x, y ≥ 0}`\nDualPowerCone: the cone `[u, v, w] ∈ {R³: (u / exponent)^{exponent} (v / (1-exponent))^{1-exponent} ≥ |w|; u, v ≥ 0}`.",
                "required": ["exponent"],
                "properties": {
                    "head": {
                        "enum": ["PowerCone", "DualPowerCone"]
                    },
                    "exponent": {
                        "type": "number"
                    }
                }
            }]
        }
    }
}